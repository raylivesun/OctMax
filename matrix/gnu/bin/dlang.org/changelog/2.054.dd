Ddoc

$(CHANGELOG_NAV_INJECT)

$(VERSION Jul 10, 2011, =================================================,

    $(WHATSNEW
        $(LI Implement @safe)
        $(LI Implement @property)
        $(LI Automatic inference for @safe, pure, nothrow)
        $(LI Allow labelled break and continue in CTFE)
        $(LI Warn about switch case fallthrough)
        $(LI Pointers are now supported in CTFE)
        $(LI Heap-allocated structs are now supported in CTFE)
        $(LI Added SSSE3 instructions to inline assembler)
        $(LI Change from warning to deprecated: non-final switch statements must have a default statement)
        $(LI Change from warning to deprecated: function is hidden by function)
        $(LI Add warning about switch case fallthrough)
        $(LI Add warning about calling pure nothrow functions and ignoring the result)
        $(LI Allow associative arrays with key of type bool)
        $(LI Added inference for purity and safety)
        $(LI Change win32 dmd to not emit a map file unless asked for with -map)
        $(LI Added $(B -property) switch)
        $(LI $(BUGZILLA 5823): @property call syntax restriction not implemented)

        $(LI Added core.sys.posix.netdb)
        $(LI For functions which have a version which takes a core.time.Duration
             and another version which takes an integral value, the version which
             takes an integral value is now scheduled for deprecation.)

        $(LI std.array.insertInPlace supports inserting of multiple ranges/elements in one go)
        $(LI Added std.array.uninitializedArray and std.array.minimallyInitializedArray)
        $(LI Various functions in std.string were renamed to match Phobos'
             naming conventions and be properly camelcased. The old names
             are still there but have been scheduled for deprecation.)
        $(LI Various functions in std.uni were renamed so that they don't have
             "Uni" in their name, since it was decided that it was not desirable to
             repeat a module's name in its functions' names. The old names
             are still there but have been scheduled for deprecation.)
        $(LI std.ctype has been scheduled for deprecation. std.ascii has been
             added to replace it.)
        $(LI Major performance improvements for std.algorithm.sort)
        $(LI std.string.atoi has been removed; replace it with std.conv.to!int)
        $(LI Switched to using posix.mak instead of various .mak files)
    )
    $(RUNTIMEBUGSFIXED
        $(LI $(BUGZILLA 4323): std.demangle incorrectly handles template floating point numbers)
        $(LI $(BUGZILLA 5272): Postblit not called on copying due to array append)
        $(LI $(BUGZILLA 5956): Undocumented mangling of struct value)
        $(LI $(BUGZILLA 6135): Thread/GC interaction bug on OS X)
    )
    $(LIBBUGSFIXED
        $(LI $(BUGZILLA 2108): regexp.d: The greedy dotstar isn't so greedy)
        $(LI $(BUGZILLA 3136): Incorrect and strange behavior of std.regexp.RegExp if using a pattern with optional prefix and suffix longer than 1 char)
        $(LI $(BUGZILLA 3457): rdmd fails silently in a particular setup where the compiler is not the expected)
        $(LI $(BUGZILLA 3479): writef/writefln: positional precision not working)
        $(LI $(BUGZILLA 3564): Rdmd failing to link external C libraries)
        $(LI $(BUGZILLA 3752): File.byLine fetches lines in a confusing manner)
        $(LI $(BUGZILLA 4367): std.regex: Captures is not a random access range)
        $(LI $(BUGZILLA 4574): std.regex: breaks with empy string regex)
        $(LI $(BUGZILLA 4608): std.string.chomp documentation mismatch implementation)
        $(LI $(BUGZILLA 5019): In std.regex, empty capture at end of string causes error)
        $(LI $(BUGZILLA 5059): String assignment in foreach loop breaks immutability)
        $(LI $(BUGZILLA 5458): scope for function parameters is not documented)
        $(LI $(BUGZILLA 5511): std.regex optional capture with no-match cause error)
        $(LI $(BUGZILLA 5598): rdmd does not fail on invalid filename)
        $(LI $(BUGZILLA 5673): Add lookahead and forgetful matching support std.regex)
        $(LI $(BUGZILLA 5705): Swapping identical struct with hasElaborateAssign causes "overlapping array copy" exception)
        $(LI $(BUGZILLA 5836): std.typetuple.staticIndexOf's example code missing %s in call to writefln)
        $(LI $(BUGZILLA 5857): std.regex (...){n,m} is bogus when (...) contains repetitions)
        $(LI $(BUGZILLA 5869): std.thread needs to be removed)
        $(LI $(BUGZILLA 6026): DLL example needs update due to missing core.dll_helper)
        $(LI $(BUGZILLA 6076): regression, std.regex: "c.*|d" matches "mm")
        $(LI $(BUGZILLA 6101): Documentation for dead modules still distributed with DMD)
        $(LI $(BUGZILLA 6113): singletons in std.datetime are not created early enough)
        $(LI $(BUGZILLA 6193): Appender.clear() functionality or documentation)
    )
    $(DMDBUGSFIXED
        $(LI $(BUGZILLA 693): 'this' can't be used as an alias parameter for a mixin)
        $(LI $(BUGZILLA 1373): typeof(func).stringof fails when func has parameters.)
        $(LI $(BUGZILLA 1411): ref Tuple should transform to Tuple of refs)
        $(LI $(BUGZILLA 1570): Wrong return for address operator)
        $(LI $(BUGZILLA 2180): filename error with #line)
        $(LI $(BUGZILLA 2521): Not possible to return immutable value by ref)
        $(LI Temp destructors now called if exception is thrown)
        $(LI $(BUGZILLA 2625): Creating new struct with literal bypasses immutability of members if struct is in array)
        $(LI $(BUGZILLA 3147): Incorrect value range propagation for addition)
        $(LI $(BUGZILLA 3359): Cannot parse pure/const/immutable functions with inferred return type)
        $(LI $(BUGZILLA 3445): partial fix)
        $(LI $(BUGZILLA 3511): ref return property confused with property setter)
        $(LI $(BUGZILLA 3632): modify float is float to do a bitwise compare)
        $(LI $(BUGZILLA 3688): Can't have declaration with assignment to const/immutable inside if condition)
        $(LI $(BUGZILLA 3722): A method without an in contract should always succeed, even if overridden)
        $(LI $(BUGZILLA 3799): isStaticFunction trait evaluates to true for non-static nested functions)
        $(LI $(BUGZILLA 4031): Should be able to access const value-type globals from pure functions)
        $(LI $(BUGZILLA 4040): const/immutable on the right in auto return class methods)
        $(LI $(BUGZILLA 4063): [CTFE] key not found in AA gives bad error message)
        $(LI $(BUGZILLA 4065): [CTFE] AA "in" operator doesn't work)
        $(LI $(BUGZILLA 4107): Duplicate documentation for member function templates)
        $(LI $(BUGZILLA 4132): pointer arithmetic accepted in @safe functions)
        $(LI $(BUGZILLA 4170): Missing line number on compile-time array index)
        $(LI $(BUGZILLA 4258): "auto ref" doesn't work in one or more cases)
        $(LI $(BUGZILLA 4448): [CTFE] labeled break doesn't work in CTFE)
        $(LI $(BUGZILLA 4494): ICE(cod1.c) Array literal filled with results of void function)
        $(LI $(BUGZILLA 4633): typeof({return 1;}()) declaration fails if inside main)
        $(LI $(BUGZILLA 4661): Array Literal Incompatible Type Error Msg Should Include Line Number)
        $(LI $(BUGZILLA 4706): Overloading auto return w/ non-auto return = strange error msg)
        $(LI $(BUGZILLA 4745): Non-uniform handling of commas in static initialization of structs)
        $(LI $(BUGZILLA 4885): Uninitialize Pointers Allowed in @safe code)
        $(LI $(BUGZILLA 4910): [CTFE] Cannot evaluate a function that has failed at once)
        $(LI $(BUGZILLA 4963): ICE(type.c:320) for struct append where T.sizeof $(LESS) 3)
        $(LI $(BUGZILLA 4969): nothrow check can't handle multiple catches)
        $(LI $(BUGZILLA 5088): Cannot cast const(int) to long in @safe function)
        $(LI $(BUGZILLA 5258): [CTFE] Stack overflow with struct by ref)
        $(LI $(BUGZILLA 5284): Array ops punch through const system)
        $(LI $(BUGZILLA 5327): Creating new struct with literal bypasses immutability of members of members of the struct)
        $(LI $(BUGZILLA 5396): [CTFE] Invalid code with nested functions in CTFE)
        $(LI $(BUGZILLA 5415): @Safe functions not working)
        $(LI $(BUGZILLA 5497): -- now produces error message instead of wrong code)
        $(LI $(BUGZILLA 5551): opUnary-opBinary conflict)
        $(LI $(BUGZILLA 5574): Struct destructor freaks out when an array of struct with single element is instantiated inside a class)
        $(LI $(BUGZILLA 5615): [CTFE] std.string.indexOf broken at compile time)
        $(LI $(BUGZILLA 5633): [CTFE] ICE(constfold.c): is expression with struct, struct pointer, array literal...)
        $(LI $(BUGZILLA 5657): Temporary object destruction)
        $(LI $(BUGZILLA 5659): Conditional operator, array literal, and std.traits.CommonType return a wrong common type)
        $(LI $(BUGZILLA 5676): [CTFE] segfault using tuple containing struct that has opAssign)
        $(LI $(BUGZILLA 5682): [CTFE] Silently wrong result possibly related to operator overloading and expression order)
        $(LI $(BUGZILLA 5693): Segfault with address of template struct opCall)
        $(LI $(BUGZILLA 5708): [CTFE] Incorrect string constant folding with -inline)
        $(LI $(BUGZILLA 5771): Template constructor and auto ref do not work)
        $(LI $(BUGZILLA 5819): DMD doesn't error/warn about illegal asm for 64bit mode)
        $(LI $(BUGZILLA 5845): Regression(2.041) [CTFE] "stack overflow" with recursive ref argument)
        $(LI $(BUGZILLA 5856): overloading on const doesn't work for operator overload)
        $(LI $(BUGZILLA 5859): Declaration inside if condition doesn't call destructor)
        $(LI $(BUGZILLA 5861): Wrong filename in error message when an invalid delegate in a template parameter is typeof()-ed)
        $(LI $(BUGZILLA 5885): wrong codegen for OPu32_d)
        $(LI $(BUGZILLA 5897): unrelated struct type casting should ignite construction)
        $(LI $(BUGZILLA 5936): Invalid code with nested functions in CTFE)
        $(LI $(BUGZILLA 5946): failing lookup 'this' from function in template)
        $(LI $(BUGZILLA 5954): [CTFE] enum structs with ctor)
        $(LI $(BUGZILLA 5959): Return by reference with nested function should be allowed)
        $(LI $(BUGZILLA 5962): Template function declaration with prefixed storage class and auto occurs conflict)
        $(LI $(BUGZILLA 5963): iasm does not accept 64bit integer literal)
        $(LI $(BUGZILLA 6001): [CTFE] ICE(interpret.c) mutating ref array)
        $(LI $(BUGZILLA 6015): [CTFE] Strange behavior of assignment appears in a situation)
        $(LI $(BUGZILLA 6049): [CTFE] Array literals of structs with invariant() are wrong)
        $(LI $(BUGZILLA 6052): [CTFE] Struct elements in an array are treated like reference type)
        $(LI $(BUGZILLA 6053): [CTFE] Two ICEs involving pointers (dereference and assign; pointer variable on stack))
        $(LI $(BUGZILLA 6054): [CTFE] ICE when returning a returned compile-time associative array containing a key of an idup-ed array literal)
        $(LI $(BUGZILLA 6059): Incompatible types in array literal shows __error and error)
        $(LI $(BUGZILLA 6072): [CTFE] Regression(git master): Cannot declare variable inside an 'if' condition)
        $(LI $(BUGZILLA 6075): Cannot set value to associative array from a weakly-pure function when the value type has a (pure) opAssign)
        $(LI $(BUGZILLA 6077): [CTFE] Cannot append null array to null array.)
        $(LI $(BUGZILLA 6078): [CTFE] ICE on foreach over array struct member which is null)
        $(LI $(BUGZILLA 6079): [CTFE] Array index out of bound detection is off-by-one)
        $(LI $(BUGZILLA 6090): DDoc parenthesis escape issues.)
        $(LI $(BUGZILLA 6100): [CTFE] Regression: struct return values wrong if used in array initializer)
        $(LI $(BUGZILLA 6109): 'nothrow' does not check slice indices)
        $(LI $(BUGZILLA 6111): Escaping reference to local variable not detected)
        $(LI $(BUGZILLA 6119): Assertion failure: '0' on line 1118 in file 'glue.c')
        $(LI $(BUGZILLA 6120): [CTFE] ICE on calling constructor of template struct with -inline in function/delegate literal.)
        $(LI $(BUGZILLA 6123): [CTFE] Cannot call a template member method inside delegate/function literal with -inline.)
        $(LI $(BUGZILLA 6137): [CTFE] Foreach on semantically wrong initialized array crashes the compiler)
        $(LI $(BUGZILLA 6145): Meaningless second error message for complex size of static array)
        $(LI $(BUGZILLA 6150): runnable/testsocket.d)
        $(LI $(BUGZILLA 6158): winsamp and dhry samples need an update)
        $(LI $(BUGZILLA 6161): iasm opcode family Jcc use absolute address instead of relative for functions)
        $(LI $(BUGZILLA 6164): [CTFE] Local arrays in a recursive local function behave funny)
        $(LI $(BUGZILLA 6198): [GSoC] ICE(e2ir.c) With circular import)
        $(LI $(BUGZILLA 6229): %= and /= no longer work on char type)
        $(LI $(BUGZILLA 6230): Member functions can no longer be weakly pure)
        $(LI $(BUGZILLA 6234): 64-bit array append generates inline code to copy new data, but does not call postblit)
        $(LI $(BUGZILLA 6241): test sdtor.d on osx not catching)
        $(LI $(BUGZILLA 6242): Disallow inoperant "in" contracts)
        $(LI $(BUGZILLA 6264): ICE on testing opSlice in static if)
        $(LI $(BUGZILLA 6267): Can't increment alias this'd struct from ref return)
        $(LI $(BUGZILLA 6279): Regression(2.054 beta): array-vararg with pointer type not working in safe code)
    )
)
$(CHANGELOG_NAV_INJECT)

Macros:
        VER=2.054
        TITLE=Change Log: $(VER)
